private void createBricks(ImageReader imageReader, Vector2 windowDimensions) {
		Renderable brickImage = imageReader.readImage("assets/assets/brick.png", false);
		Renderable heartImage = imageReader.readImage("assets/assets/heart.png", true);
		Vector2 heartDimensions = new Vector2(HEART_HEIGHT_WIDTH, HEART_HEIGHT_WIDTH);

		float len_bricks = windowDimensions.x()-(2*WALLS_WIDTH+2)-(this.num_bricks-1);
		float brick_width = len_bricks/this.num_bricks;
		for (int row = 0; row<this.num_lines; row++){
			float verticalSpacing = 2; // You can try 0 or 1 if still too much
			float y = row * (PADDLE_BRICK_HEIGHT + verticalSpacing);
			//todo fix the rows and the probability of the special bricks
			for (int col=0; col<this.num_bricks; col++){
				float x = WALLS_WIDTH+ col*(brick_width +ADDED_SPACE);
				if (col==3){
					Vector2 puckLoc = new Vector2(x+(brick_width/2),y);

					GameObject brick = new Brick(new Vector2(x, y),
							new Vector2(brick_width, PADDLE_BRICK_HEIGHT)
							,brickImage, new PuckStrategy(imageReader, soundReader, gameObjects(),
							puckLoc, new Vector2(PUCK_SIZE,PUCK_SIZE),BALL_SPEED,
							new BasicCollisionStrategy(this), windowDimensions, this));
					gameObjects().addGameObject(brick, Layer.DEFAULT);
					bricksCounter.increment();
				}
				else if (col==2){
					GameObject brick = new Brick(new Vector2(x, y),
							new Vector2(brick_width, PADDLE_BRICK_HEIGHT)
							, brickImage, new ExtraPaddleStrategy(this,
							new BasicCollisionStrategy(this), gameObjects(), imageReader,
							soundReader, brickImage, inputListener, windowDimensions,
							new Vector2(PADDLE_WIDTH, PADDLE_BRICK_HEIGHT)));
					gameObjects().addGameObject(brick, Layer.DEFAULT);
					bricksCounter.increment();
				}
				else if (col == 1) {
					CollisionStrategy heartStrat = new ReturnStreakStrategy(
							new BasicCollisionStrategy(this),
							gameObjects(),
							windowDimensions,
							(Paddle)userPaddle,
							heartImage,
							heartDimensions,
							this
					);
					GameObject brick = new Brick(
							new Vector2(x, y),
							new Vector2(brick_width, PADDLE_BRICK_HEIGHT),
							brickImage,
							heartStrat
					);
					gameObjects().addGameObject(brick, Layer.DEFAULT);
					bricksCounter.increment();
				}
				else {
					GameObject brick = new Brick(new Vector2(x, y),
							new Vector2(brick_width, PADDLE_BRICK_HEIGHT)
							, brickImage, new BasicCollisionStrategy(this));
					gameObjects().addGameObject(brick, Layer.DEFAULT);
					bricksCounter.increment();
				}
			}
		}
	}