package bricker.brick_strategies;

import danogl.GameObject;

/**
 * A {@link CollisionStrategy} that combines two other strategies and executes both
 * when a collision occurs. This allows composition of behaviors â€” for example, a brick
 * may spawn an extra ball *and* grant an extra paddle on hit.
 * <p>
 * This class is typically generated by the {@link FactoryDoubleStrategy}.
 * </p>
 */
public class DoubleStrategy implements CollisionStrategy {

	private final CollisionStrategy firstStrg;
	private final CollisionStrategy secondStrg;

	/**
	 * Constructs a composite strategy by combining two separate {@link CollisionStrategy} objects.
	 *
	 * @param firstStrg  The first strategy to execute on collision.
	 * @param secondStrg The second strategy to execute on collision.
	 */
	public DoubleStrategy(CollisionStrategy firstStrg, CollisionStrategy secondStrg) {
		this.firstStrg = firstStrg;
		this.secondStrg = secondStrg;
	}

	/**
	 * Applies both encapsulated strategies' {@code onCollision} behavior.
	 * Both are called with the same arguments.
	 *
	 * @param object1 The object that owns this strategy (usually a brick).
	 * @param object2 The object that collided with {@code object1}.
	 */
	@Override
	public void onCollision(GameObject object1, GameObject object2) {
		this.firstStrg.onCollision(object1, object2);
		this.secondStrg.onCollision(object1, object2);
	}
}
